/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PredictMultipleChoiceContractJson } from "../multiple-choice/PredictMultipleChoice.ral.json";
import { getContractByCodeHash } from "./contracts";
import { PunterChoice, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PredictMultipleChoiceTypes {
  export type Fields = {
    roundTemplateId: HexString;
    title: HexString;
    epoch: bigint;
    operator: Address;
    feesBasisPts: bigint;
    repeatEvery: bigint;
    claimedByAnyoneDelay: bigint;
    playerCounter: bigint;
    endBeforeEnd: boolean;
  };

  export type State = ContractState<Fields>;

  export type BetEvent = ContractEvent<{
    contractId: HexString;
    from: Address;
    epoch: bigint;
    amount: bigint;
    side: bigint;
    claimedByAnyoneTimestamp: bigint;
  }>;
  export type RoundEndedEvent = ContractEvent<{
    contractId: HexString;
    epoch: bigint;
    sideWon: bigint;
  }>;
  export type RoundStartedEvent = ContractEvent<{
    contractId: HexString;
    epoch: bigint;
  }>;
  export type ClaimedEvent = ContractEvent<{
    contractId: HexString;
    punterAddress: Address;
    from: Address;
    amount: bigint;
    epoch: bigint;
  }>;

  export interface CallMethodTable {
    getArrayElem: {
      params: CallContractParams<{ array: HexString; index: bigint }>;
      result: CallContractResult<HexString>;
    };
    getTitle: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  PredictMultipleChoiceInstance,
  PredictMultipleChoiceTypes.Fields
> {
  encodeFields(fields: PredictMultipleChoiceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PredictMultipleChoiceTypes.Fields;
  }

  eventIndex = { Bet: 0, RoundEnded: 1, RoundStarted: 2, Claimed: 3 };
  consts = {
    ErrorCodes: {
      PunterChoiceNotExists: BigInt(1),
      InvalidPunterChoiceAddress: BigInt(2),
      InvalidCaller: BigInt(3),
      BidTimestampReached: BigInt(4),
      RoundAlreadyRunning: BigInt(5),
      RoundDidntEnd: BigInt(6),
      RoundNotExists: BigInt(7),
      AlreadyPlayed: BigInt(8),
      NotEnoughAlph: BigInt(9),
      CannotBeClaimedYet: BigInt(10),
      NotAllPlayerClaimed: BigInt(11),
    },
    SubContractTypes: { RoundMultipleChoice: "00", PunterChoice: "01" },
  };

  at(address: string): PredictMultipleChoiceInstance {
    return new PredictMultipleChoiceInstance(address);
  }

  tests = {
    getArrayElem: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { array: HexString; index: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<HexString, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "getArrayElem", params);
    },
    getRoundByEpoch: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { epochToGet: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<HexString, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "getRoundByEpoch", params);
    },
    getRoundByEpochByteVec: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { epochToGet: HexString },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<HexString, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "getRoundByEpochByteVec", params);
    },
    getTitle: async (
      params: Omit<
        TestContractParams<
          PredictMultipleChoiceTypes.Fields,
          never,
          { punters?: Map<HexString, PunterChoice> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "getTitle", params);
    },
    startRound: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { from: Address },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "startRound", params);
    },
    endRound: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { sideWon: bigint; immediatelyStart: boolean },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "endRound", params);
    },
    bid: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { amount: bigint; side: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "bid", params);
    },
    withdraw: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { from: Address; arrayEpochIn: HexString; addressToClaim: Address },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "withdraw", params);
    },
    destroyRound: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { epochArray: HexString },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "destroyRound", params);
    },
    destroy: async (
      params: Omit<
        TestContractParams<
          PredictMultipleChoiceTypes.Fields,
          never,
          { punters?: Map<HexString, PunterChoice> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "destroy", params);
    },
    boostRound: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { amount: bigint; epochToBoost: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "boostRound", params);
    },
    setNewRepeatEvery: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { newRecurrence: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "setNewRepeatEvery", params);
    },
    setNewFees: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { basisPts: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "setNewFees", params);
    },
    setNewOperator: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { newOperator: Address },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "setNewOperator", params);
    },
    setNewClaimedByAnyone: async (
      params: TestContractParams<
        PredictMultipleChoiceTypes.Fields,
        { newClaimedByAnyoneDelay: bigint },
        { punters?: Map<HexString, PunterChoice> }
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "setNewClaimedByAnyone", params);
    },
    setEndBeforeEnd: async (
      params: Omit<
        TestContractParams<
          PredictMultipleChoiceTypes.Fields,
          never,
          { punters?: Map<HexString, PunterChoice> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { punters?: Map<HexString, PunterChoice> }>
    > => {
      return testMethod(this, "setEndBeforeEnd", params);
    },
  };
}

// Use this object to test and deploy the contract
export const PredictMultipleChoice = new Factory(
  Contract.fromJson(
    PredictMultipleChoiceContractJson,
    "=10-2+68=2-2+a7=2-2+b5=1-1=3+4=1-2+c5=2+c=1-1=2-1+e=1+4=2-1=2-2+45=2-2+47=3-1+9=3-1+a=3-1+b=3-1+d=3-1+e=92-1+e=24+7e024020526f756e644d756c7469706c6543686f69636520636f6e747261637420696420001601=25-1+d=22+7e024020526f756e644d756c7469706c6543686f69636520636f6e747261637420696420001601=598-2+70=342+7a7e0214696e73657274206174206d617020706174683a2000=119-1+3=60-2+80=127-1+a=280+7a7e021472656d6f7665206174206d617020706174683a2000=61-1+9=498",
    "df898d3c6e8f79170961d908e8f2b36e2baefcb0a8b28bf3a986ba47372f65d7",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class PredictMultipleChoiceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    punters: new RalphMap<HexString, PunterChoice>(
      PredictMultipleChoice.contract,
      this,
      "punters"
    ),
  };

  async fetchState(): Promise<PredictMultipleChoiceTypes.State> {
    return fetchContractState(PredictMultipleChoice, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeBetEvent(
    options: EventSubscribeOptions<PredictMultipleChoiceTypes.BetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictMultipleChoice.contract,
      this,
      options,
      "Bet",
      fromCount
    );
  }

  subscribeRoundEndedEvent(
    options: EventSubscribeOptions<PredictMultipleChoiceTypes.RoundEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictMultipleChoice.contract,
      this,
      options,
      "RoundEnded",
      fromCount
    );
  }

  subscribeRoundStartedEvent(
    options: EventSubscribeOptions<PredictMultipleChoiceTypes.RoundStartedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictMultipleChoice.contract,
      this,
      options,
      "RoundStarted",
      fromCount
    );
  }

  subscribeClaimedEvent(
    options: EventSubscribeOptions<PredictMultipleChoiceTypes.ClaimedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictMultipleChoice.contract,
      this,
      options,
      "Claimed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PredictMultipleChoiceTypes.BetEvent
      | PredictMultipleChoiceTypes.RoundEndedEvent
      | PredictMultipleChoiceTypes.RoundStartedEvent
      | PredictMultipleChoiceTypes.ClaimedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PredictMultipleChoice.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getArrayElem: async (
      params: PredictMultipleChoiceTypes.CallMethodParams<"getArrayElem">
    ): Promise<PredictMultipleChoiceTypes.CallMethodResult<"getArrayElem">> => {
      return callMethod(
        PredictMultipleChoice,
        this,
        "getArrayElem",
        params,
        getContractByCodeHash
      );
    },
    getTitle: async (
      params?: PredictMultipleChoiceTypes.CallMethodParams<"getTitle">
    ): Promise<PredictMultipleChoiceTypes.CallMethodResult<"getTitle">> => {
      return callMethod(
        PredictMultipleChoice,
        this,
        "getTitle",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends PredictMultipleChoiceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PredictMultipleChoiceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      PredictMultipleChoice,
      this,
      calls,
      getContractByCodeHash
    )) as PredictMultipleChoiceTypes.MultiCallResults<Calls>;
  }
}
