Contract Predict (
   gameContract: Game,
   punterTemplateId: ByteVec,
   roundTemplateId: ByteVec,
   mut epoch: U256,
   mut operator: Address,
   mut feesBasisPts: U256,
   mut repeatEvery: U256,
   mut claimedByAnyoneDelay: U256,
   mut playerCounter: U256 
) extends DynamicArrayForInt() {

   event BetBull(from: Address, epoch: U256, amount: U256, up: Bool, claimedByAnyoneTimestamp: U256)
   event BetBear(from: Address, epoch: U256, amount: U256, up: Bool, claimedByAnyoneTimestamp: U256)
   event RoundEnded(epoch: U256, price: U256)
   event RoundStarted(epoch: U256, price: U256)
   event Claimed(punterAddress: Address, from: Address, amount: U256, epoch: U256)

   enum ErrorCodes {
      PunterNotExists = 1
      InvalidPunterAddress = 2
      InvalidCaller = 3
      BidTimestampReached = 4
      RoundAlreadyRunning = 5
      RoundDidntEnd = 6
      RoundNotExists = 7
      AlreadyPlayed = 8
      NotEnoughAlph = 9
      CannotBeClaimedYet = 10
      NotAllPlayerClaimed  = 11
   }

   enum SubContractTypes {
      Round = #00
      Punter = #01
   }


   fn getRoundByEpoch(epochToGet: U256) -> (Round) {
      let roundContractId = subContractId!(SubContractTypes.Round ++ u256To4Byte!(epochToGet))
      emit Debug(`Round contract id ${roundContractId}`)
      assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)

      return Round(roundContractId)
   }

   fn getRoundByEpochByteVec(epochToGet: ByteVec) -> (Round) {
      let roundContractId = subContractId!(SubContractTypes.Round ++ epochToGet)
      emit Debug(`Round contract id ${roundContractId}`)
      assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)

      return Round(roundContractId)
   }

   fn getBetInfoByEpoch(from: Address, epochToGet: ByteVec) -> Punter {
      let bidderContractId = subContractId!(SubContractTypes.Punter ++ toByteVec!(from) ++ epochToGet)
      assert!(contractExists!(bidderContractId), ErrorCodes.PunterNotExists)
    
      return Punter(bidderContractId)
   }


   @using(updateFields = false, preapprovedAssets = true, checkExternalCaller = true)
   pub fn startRound(from: Address, price: U256) -> (U256){
      let mut caller = callerAddress!()
      let callerContract = callerContractId!()
      checkCaller!(caller == operator || caller == selfAddress!() || callerContract == contractId!(gameContract), ErrorCodes.InvalidCaller)

      if (caller == selfAddress!() || callerContract == contractId!(gameContract) ){
         caller = from
      }

      let roundContractPath = SubContractTypes.Round ++ u256To4Byte!(epoch)

      assert!(!contractExists!(subContractId!(roundContractPath)), ErrorCodes.RoundAlreadyRunning)
      emit Debug(`Round contract id ${roundContractPath}`)
      emit Debug(`Actual epoch is ${epoch} with start price ${price}`)

      let bidTimestampEnd = blockTimeStamp!() + repeatEvery
      let (encodedImmFields, encodedMutFields) = Round.encodeFields!(selfContract!(), epoch, price,feesBasisPts,bidTimestampEnd, operator,false, 0, 0 ,0 ,0 ,0 ,0, 0, 0, 0)


      copyCreateSubContract!{caller -> ALPH: 1 alph}(roundContractPath, roundTemplateId, encodedImmFields, encodedMutFields)
      emit RoundStarted(epoch, price)

      return epoch
   }

   @using(updateFields = true, checkExternalCaller = true, preapprovedAssets = true)
   pub fn endRound(from: Address, actualPrice: U256, immediatelyStart: Bool) -> (U256) {
      let mut caller = callerAddress!()
      let callerContract = callerContractId!()

      checkCaller!(caller == operator || callerContract == contractId!(gameContract), ErrorCodes.InvalidCaller)

      if (caller == selfAddress!() || callerContract == contractId!(gameContract) ){
         caller = from
      }

      let round = getRoundByEpoch(epoch)
      let endRoundTimestamp = round.getEndRoundTime()

      assert!(endRoundTimestamp <= blockTimeStamp!(), ErrorCodes.RoundDidntEnd)

      round.calculateRewards(actualPrice)

      emit RoundEnded(epoch, actualPrice)
      epoch = epoch + 1

      if (immediatelyStart){
         startRound{ caller -> ALPH: 1 alph}(caller, actualPrice)
      }
      return epoch
    }

   @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
   pub fn bid(amount: U256, up: Bool, from: Address) -> (U256){
      let caller = from

      let round = getRoundByEpoch(epoch)
      let endRoundTimestamp = round.getEndRoundTime()
      let timestampNow = blockTimeStamp!()
      assert!(timestampNow < endRoundTimestamp, ErrorCodes.BidTimestampReached)
      assert!(isAssetAddress!(caller), ErrorCodes.InvalidPunterAddress)
      assert!(amount >= 1 alph, ErrorCodes.NotEnoughAlph)

      // use address for th path to be able to find it back 
      let bidderContractId = SubContractTypes.Punter ++ toByteVec!(caller) ++ u256To4Byte!(epoch)

      // user never played, create contract
      assert!(!contractExists!(subContractId!(bidderContractId)), ErrorCodes.AlreadyPlayed)

      let bidAmount = amount - 1 alph let claimedByAnyoneTimestamp = timestampNow + claimedByAnyoneDelay
      let (encodedImmFields, encodedMutFields) = Punter.encodeFields!(selfContract!(), caller, epoch, up, bidAmount, claimedByAnyoneTimestamp)
      copyCreateSubContract!{caller -> ALPH: 1 alph}(bidderContractId, punterTemplateId, encodedImmFields, encodedMutFields)
      round.updateAmount{caller -> ALPH: bidAmount}(caller, bidAmount, up)
        
      playerCounter = playerCounter + 1
      if (up){
         emit BetBull(caller, epoch, amount, up, claimedByAnyoneTimestamp)
      } else {
         emit BetBear(caller, epoch, amount, up, claimedByAnyoneTimestamp)
      }
      
      return epoch
    }

   
   @using(checkExternalCaller = true, updateFields = true)
   pub fn withdraw(from: Address, arrayEpochIn: ByteVec, addressToClaim: Address) -> () {
      let callerContract = callerContractId!()
      let caller = from

      checkCaller!(from == callerAddress!() || callerContract == contractId!(gameContract), ErrorCodes.InvalidCaller)

      let timestampNow = blockTimeStamp!()

      for (let mut index = 0; index < size!(arrayEpochIn)/4; index = index + 1) {
         let epochNumber = getArrayElem(arrayEpochIn, index)
         let roundContractId = subContractId!(SubContractTypes.Round ++ epochNumber)
         let betInfoContractId = subContractId!(SubContractTypes.Punter ++ toByteVec!(addressToClaim) ++ epochNumber)
         assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)
         assert!(contractExists!(betInfoContractId), ErrorCodes.PunterNotExists)

         if (contractExists!(roundContractId) && contractExists!(betInfoContractId)){
            let betInfoCaller = getBetInfoByEpoch(addressToClaim, epochNumber)
            
            let addressPunter = betInfoCaller.getAddress()
            let canBeClaimedAt = betInfoCaller.getClaimedByAnyone()
            
            if(addressToClaim != caller){
               assert!(timestampNow > canBeClaimedAt, ErrorCodes.CannotBeClaimedYet)
            }

            let amountPunter = betInfoCaller.getAmountBid()
            let upBid = betInfoCaller.getBid()

            let round = getRoundByEpochByteVec(epochNumber)

            // cannot claim if the round didnt end 

            round.userClaimRewards(addressToClaim, amountPunter, upBid)
            betInfoCaller.destroy(caller)

            playerCounter = playerCounter - 1 
            // emit who call and with and which punter it concerned
            emit Claimed(addressPunter, caller, amountPunter, u256From4Byte!(epochNumber))
         }
      }

   }


   pub fn destroyRound(epochArray: ByteVec) -> (){
      checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)

      for (let mut index = 0; index < size!(epochArray)/4; index = index + 1) {
         let epochNumber = getArrayElem(epochArray, index)

         let epochContractId = subContractId!(#00 ++ epochNumber)
         if (contractExists!(epochContractId)){
            let round = getRoundByEpochByteVec(epochNumber)
            round.destroy()
         }
      }
   }
   
   
   @using(assetsInContract = true)
   pub fn destroy() -> (){
      let caller = callerAddress!()
      let callerContract = callerContractId!()
      checkCaller!(caller == operator || callerContract == contractId!(gameContract), ErrorCodes.InvalidCaller)

      assert!(playerCounter <= 0, ErrorCodes.NotAllPlayerClaimed)

      destroySelf!(operator)
   }

   @using(preapprovedAssets = true, checkExternalCaller = false)
   pub fn boostRound(from: Address, amount: U256, epochToBoost: U256) -> (){
      let roundToBoost = getRoundByEpoch(epochToBoost)

      roundToBoost.boost{from -> ALPH: amount}(from, amount)
   }

   @using(updateFields = true, checkExternalCaller = false)
   pub fn setNewRepeatEvery(newRecurrence: U256) -> (){
      checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
      repeatEvery = newRecurrence
   }

   @using(updateFields = true, checkExternalCaller = false)
   pub fn setNewFees(basisPts: U256) -> (){
      checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
      feesBasisPts = basisPts
   }

   @using(updateFields = true, checkExternalCaller = false)
   pub fn setNewOperator(newOperator: Address) -> (){
      checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
      operator = newOperator
   }

   @using(updateFields = true, checkExternalCaller = false)
   pub fn setNewClaimedByAnyone(newClaimedByAnyoneDelay: U256) -> (){
      checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
      claimedByAnyoneDelay = newClaimedByAnyoneDelay
   }

}
